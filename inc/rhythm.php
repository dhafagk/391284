<?php/* NOTEarray( 'post','drama' ),'rewrite'           =>  array('slug' => 'post_score', 'with_front' => false),*//*===========================		WIDGET FOOTER=============================*/function themegue_widgets() {  register_sidebar( array(    'name' => 'Main Widget',    'id' => 'main-widget',    'description' => 'This widget appears under the main post',    'before_widget' => '<div id="%1$s" class="widget-container %2$s">',    'after_widget' => '</div>',    'before_title' => '<h3 class="widget-title"><i class="fas fa-external-link-alt" style="float:right;"></i>',    'after_title' => '</h3>',  ));  register_sidebar( array(    'name' => 'Footer Slot 1',    'id' => 'footer-slot1',    'description' => '',    'before_widget' => '<div id="%1$s" class="widget-container %2$s">',    'after_widget' => '</div>',    'before_title' => '<h3 class="widget-title">',    'after_title' => '</h3>',  ));  register_sidebar( array(    'name' => 'Footer Slot 2',    'id' => 'footer-slot2',    'description' => '',    'before_widget' => '<div id="%1$s" class="widget-container %2$s">',    'after_widget' => '</div>',    'before_title' => '<h3 class="widget-title">',    'after_title' => '</h3>',  ));  register_sidebar( array(    'name' => 'Footer Slot 3',    'id' => 'footer-slot3',    'description' => '',    'before_widget' => '<div id="%1$s" class="widget-container %2$s">',    'after_widget' => '</div>',    'before_title' => '<h3 class="widget-title">',    'after_title' => '</h3>',  ));  }add_action( 'widgets_init', 'themegue_widgets' );/*===========================		TAXONOMY drama=============================*/add_action('init', 'cptui_register_my_cpt_drama');function cptui_register_my_cpt_drama(){	register_post_type('drama',		array(			'label' => 'Drama',			'description' => '',			'public' => true,			'show_ui' => true,			'show_in_menu' => true,			'capability_type' => 'post',			'map_meta_cap' => true,			'hierarchical' => false,			'rewrite' => array(				'slug' => 'drama',				'with_front' => true			),			'query_var' => true,			'supports' => array(				'title',				'editor',				'custom-fields',				'revisions',				'thumbnail',				'author',				'post-formats',				'categories'			),			'labels' => array(				'name' => 'Drama List',				'singular_name' => 'Drama List',				'menu_name' => 'Drama List',				'add_new' => 'Add Drama',				'add_new_item' => 'Add New Drama',				'edit' => 'Edit',				'edit_item' => 'Edit Drama',				'new_item' => 'New Drama',				'view' => 'View Drama',				'view_item' => 'View Drama',				'search_items' => 'Search Drama',				'not_found' => 'No Drama Found',				'not_found_in_trash' => 'No Drama Found in Trash',				'parent' => 'Parent Drama',			),			'public' => true,			'has_archive' => true,		)	);}add_action('init', 'cptui_register_my_taxes_source');function cptui_register_my_taxes_source(){	register_taxonomy(		'source',		array(			0 => 'post'		),		array(			'hierarchical' => false,			'label' => 'Source',			'show_ui' => true,			'query_var' => true,			'default_term'       => '12',			'hierarchical' => true,			'show_admin_column' => false,			'rewrite'           =>  array('slug' => 'source', 'with_front' => false),			'labels' => array(				'search_items' => 'Total Source',				'popular_items' => 'Popular Source',				'all_items' => 'All Source',				'parent_item' => 'Parent Source',				'parent_item_colon' => 'Parent Source:',				'edit_item' => 'Edit Source',				'update_item' => 'Update Source',				'add_new_item' => 'Add New Source',				'new_item_name' => 'New Source Name',				'separate_items_with_commas' => '',				'add_or_remove_items' => '',				'choose_from_most_used' => '',			)		)	); }add_action('init', 'cptui_register_my_taxes_country');function cptui_register_my_taxes_country(){	register_taxonomy(		'country',		array(			0 => 'drama',		),		array(			'hierarchical' => true,			'label' => 'Country',			'show_ui' => true,			'query_var' => true,			'show_admin_column' => false,			'rewrite'           =>  array('slug' => 'country', 'with_front' => false),			'labels' => array(				'search_items' => 'Total Country',				'popular_items' => 'Popular Country',				'all_items' => 'All Countries',				'parent_item' => 'Parent Country',				'parent_item_colon' => 'Parent Country:',				'edit_item' => 'Edit Country',				'update_item' => 'Update Country',				'add_new_item' => 'Add New Country',				'new_item_name' => 'New Country Name',				'separate_items_with_commas' => '',				'add_or_remove_items' => '',				'choose_from_most_used' => '',			)		)	); }add_action('init', 'cptui_register_my_taxes_durations');function cptui_register_my_taxes_durations(){	register_taxonomy(		'duration',		array(			0 => 'drama',		),		array(			'hierarchical' => false,			'label' => 'Duration',			'show_ui' => true,			'query_var' => true,			'show_admin_column' => false,			'rewrite'           =>  array('slug' => 'duration', 'with_front' => false),			'labels' => array(				'search_items' => 'Total Duration',				'popular_items' => 'Popular Duration',				'all_items' => 'All Durations',				'parent_item' => 'Parent Duration',				'parent_item_colon' => 'Parent Duration:',				'edit_item' => 'Edit Duration',				'update_item' => 'Update Duration',				'add_new_item' => 'Add New Duration',				'new_item_name' => 'New Duration Name',				'separate_items_with_commas' => '',				'add_or_remove_items' => '',				'choose_from_most_used' => '',			)		)	); }add_action('init', 'cptui_register_my_taxes_episodes');function cptui_register_my_taxes_episodes(){	register_taxonomy(		'episode',		array(			0 => 'drama'		),		array(			'hierarchical' => false,			'label' => 'Total Episode',			'show_ui' => true,			'query_var' => true,			'default_term'       => '12',			'hierarchical' => false,			'show_admin_column' => false,			'rewrite'           =>  array('slug' => 'episode', 'with_front' => false),			'labels' => array(				'search_items' => 'Total Episode',				'popular_items' => 'Popular Episode',				'all_items' => 'All Durations',				'parent_item' => 'Parent Episode',				'parent_item_colon' => 'Parent Episode:',				'edit_item' => 'Edit Episode',				'update_item' => 'Update Episode',				'add_new_item' => 'Add New Episode',				'new_item_name' => 'New Duration Name',				'separate_items_with_commas' => '',				'add_or_remove_items' => '',				'choose_from_most_used' => '',			)		)	); }add_action('init', 'cptui_register_my_taxes_genre');function cptui_register_my_taxes_genre(){	register_taxonomy(		'genre',		array(			0 => 'drama',		),		array(			'hierarchical' => true,			'label' => 'Genre',			'show_ui' => true,			'query_var' => true,			'show_admin_column' => false,			'rewrite'           =>  array('slug' => 'genre', 'with_front' => false),			'labels' => array(				'search_items' => 'Genre',				'popular_items' => 'Popular Genre',				'all_items' => 'All Genres',				'parent_item' => 'Parent Genre',				'parent_item_colon' => 'Parent Genre:',				'edit_item' => 'Edit Genre',				'update_item' => 'Update Genre',				'add_new_item' => 'Add New Genre',				'new_item_name' => 'New Genre Name',				'separate_items_with_commas' => '',				'add_or_remove_items' => '',				'choose_from_most_used' => '',			)		)	); }add_action('init', 'cptui_register_my_taxes_network');function cptui_register_my_taxes_network(){	register_taxonomy(		'network',		array(			0 => 'drama',		),		array(			'hierarchical' => true,			'label' => 'Networks',			'show_ui' => true,			'query_var' => true,			'show_admin_column' => false,			'rewrite'           =>  array('slug' => 'network', 'with_front' => false),			'labels' => array(				'search_items' => 'Networks',				'popular_items' => 'Popular Networks',				'all_items' => 'All Networks',				'parent_item' => 'Parent Networks',				'parent_item_colon' => 'Parent Networks:',				'edit_item' => 'Edit Networks',				'update_item' => 'Update Networks',				'add_new_item' => 'Add New Networks',				'new_item_name' => 'New Networks Name',				'separate_items_with_commas' => '',				'add_or_remove_items' => '',				'choose_from_most_used' => '',			)		)	); }add_action('init', 'cptui_register_my_taxes_scores');function cptui_register_my_taxes_scores(){	register_taxonomy(		'score',		array(			0 => 'drama'		),		array(			'hierarchical' => false,			'label' => 'Total Score',			'show_ui' => true,			'query_var' => true,			'show_admin_column' => false,			'rewrite'           =>  array('slug' => 'score', 'with_front' => false),			'labels' => array(				'search_items' => 'Total Score',				'popular_items' => 'Popular Score',				'all_items' => 'All Durations',				'parent_item' => 'Parent Score',				'parent_item_colon' => 'Parent Score:',				'edit_item' => 'Edit Score',				'update_item' => 'Update Score',				'add_new_item' => 'Add New Score',				'new_item_name' => 'New Score Name',				'separate_items_with_commas' => '',				'add_or_remove_items' => '',				'choose_from_most_used' => '',			)		)	); }add_action('init', 'cptui_register_my_taxes_alternative');function cptui_register_my_taxes_alternative(){	register_taxonomy(		'alternative',		array(			0 => 'drama',		),		array(			'hierarchical' => false,			'label' => 'Alternative',			'show_ui' => true,			'query_var' => true,			'show_admin_column' => false,			'rewrite'           =>  array('slug' => 'alternative', 'with_front' => false),			'labels' => array(				'search_items' => 'Alternative',				'popular_items' => 'Popular Alternative',				'all_items' => 'All Alternative',				'parent_item' => 'Parent Alternative',				'parent_item_colon' => 'Parent Alternative:',				'edit_item' => 'Edit Alternative',				'update_item' => 'Update Alternative',				'add_new_item' => 'Add New Alternative',				'new_item_name' => 'New Alternative Name',				'separate_items_with_commas' => '',				'add_or_remove_items' => '',				'choose_from_most_used' => '',			)		)	); }add_action('init', 'cptui_register_my_taxes_status');function cptui_register_my_taxes_status(){	register_taxonomy(		'status',		array(			0 => 'drama',		),		array(			'hierarchical' => true,			'label' => 'Status',			'show_ui' => true,			'query_var' => true,			'show_admin_column' => false,			'rewrite'           =>  array('slug' => 'status', 'with_front' => false),			'labels' => array(				'search_items' => 'Status',				'popular_items' => 'Popular Status',				'all_items' => 'All Status',				'parent_item' => 'Parent Status',				'parent_item_colon' => 'Parent Status:',				'edit_item' => 'Edit Status',				'update_item' => 'Update Status',				'add_new_item' => 'Add New Status',				'new_item_name' => 'New Status Name',				'separate_items_with_commas' => '',				'add_or_remove_items' => '',				'choose_from_most_used' => '',			)		)	); }add_action('init', 'cptui_register_my_taxes_type');function cptui_register_my_taxes_type(){	register_taxonomy(		'type',		array(			'post',			'drama'		),		array(			'hierarchical' => true,			'label' => 'Type',			'show_ui' => true,			'query_var' => true,			'show_admin_column' => false,			'rewrite'           =>  array('slug' => 'type', 'with_front' => false),			'labels' => array(				'search_items' => 'Type',				'popular_items' => 'Popular Type',				'all_items' => 'All Types',				'parent_item' => 'Parent Type',				'parent_item_colon' => 'Parent Type:',				'edit_item' => 'Edit Type',				'update_item' => 'Update Type',				'add_new_item' => 'Add New Type',				'new_item_name' => 'New Type Name',				'separate_items_with_commas' => '',				'add_or_remove_items' => '',				'choose_from_most_used' => '',			)		)	); }/*===========================		WIDGET.PHP=============================*/ /*   Plugin Name: Most View Week   Description: code from cukstudio, create widget by usagilabs */class cukstudio_mostviewed extends WP_Widget {        public function __construct() {               // widget actual processes               parent::WP_Widget(false,'.Usagilabs - drama Most viewed');        }        public function form( $instance ) {			echo '			<p><label for="'.$this->get_field_id('title').'">' . __('Title:') . '<br><input style="width:100%;" id="'.$this->get_field_id('title').'"  name="'.$this->get_field_name('title').'" type="text" value="'.esc_attr($instance['title']).'" /></label></p>			<p><label for="'.$this->get_field_id('posts').'">' . __('Number of Posts:',  'widgets') . '<br><input style="width:100%;"  id="'.$this->get_field_id('posts').'" name="'.$this->get_field_name('posts').'" type="text" value="'.esc_attr($instance['posts']).'" /></label></p>			';        }        public function update( $new_instance, $old_instance ) {               // processes widget options to be saved               $instance = $old_instance;               $instance['title'] = strip_tags($new_instance['title']);               $instance['posts'] = strip_tags($new_instance['posts']);               return $instance;        }        public function widget( $args, $instance ) {               extract($args);               // outputs the content of the widget			   //$options = get_option('custom_recent');               $title = $instance['title'];               $num_post = $instance['posts'];			   echo $before_widget;				if ( $title ) {				   echo $before_title . $title . $after_title;				} else {					echo $before_title . 'drama most viewed' . $after_title;				}				echo '<div class="popular-widget">';				$popularpost = new WP_Query( 				array(				'post_type' => 'post',				'posts_per_page' => $num_post?:6,				'orderby' => 'meta_value_num',				//'order'=> 'ASC',				'meta_key' => 'wpb_post_views_count',				/*'date_query' => array(					array(						'after'  => '-1 days ago'					),				),*/				)				);				while ( $popularpost->have_posts() ) : $popularpost->the_post();				echo '<div class="popular-post">';				echo '<div class="popular-thumb">';				echo '<a href="',the_permalink(),'" title="',the_title(),'">';					if (has_post_thumbnail()){the_post_thumbnail(array(45, 45, true));}					else{echo '<img height="45" width="45" src="',get_template_directory_uri(),'/lib/img/no_size.png" class="thumbnail no-img" alt="Thumbnail no image">';}				echo '</a>';				echo '</div>';				echo '<div class="popular-box">';				echo usagilabs_category();				echo the_title( sprintf( '<a href="%s" class="popular-title" rel="bookmark">', esc_url( get_permalink() ) ), '</a>' );				echo '</div>';				echo '<div class="clear"></div></div>';								endwhile;			   echo '</div>';               			   echo $after_widget;                       }}register_widget( 'cukstudio_mostviewed' ); /*   Plugin Name: Latest Episode Release   Description: create widget by usagilabs */class usagilabs_latesteps extends WP_Widget {        public function __construct() {               // widget actual processes               parent::WP_Widget(false,'.Usagilabs - Latest Episode Release');        }        public function form( $instance ) {			echo '			<p><label for="'.$this->get_field_id('title').'">' . __('Title:') . '<br><input style="width:100%;" id="'.$this->get_field_id('title').'"  name="'.$this->get_field_name('title').'" type="text" value="'.esc_attr($instance['title']).'" /></label></p>			<p><label for="'.$this->get_field_id('posts').'">' . __('Number of Posts:',  'widgets') . '<br><input style="width:100%;"  id="'.$this->get_field_id('posts').'" name="'.$this->get_field_name('posts').'" type="text" value="'.esc_attr($instance['posts']).'" /></label></p>			';        }        public function update( $new_instance, $old_instance ) {               // processes widget options to be saved               $instance = $old_instance;               $instance['title'] = strip_tags($new_instance['title']);               $instance['posts'] = strip_tags($new_instance['posts']);               return $instance;        }        public function widget( $args, $instance ) {               extract($args);               // outputs the content of the widget			   //$options = get_option('custom_recent');               $title = $instance['title'];               $num_post = $instance['posts'];			   echo $before_widget;				if ( $title ) {				   echo $before_title . $title . $after_title;				} else {					echo $before_title . 'The Latest Episode Release' . $after_title;				}				echo '<div class="latesteps-widget">';					$latesteps = new WP_Query( 				array(				'post_type' => 'post', 				'posts_per_page' => $num_post, 				'orderby' => 'date',				)				);				while ( $latesteps->have_posts() ) : $latesteps->the_post();				echo '<div class="latesteps-post cl">',the_title( sprintf( '<a href="%s" class="eps" rel="bookmark">', esc_url( get_permalink() ) ), '</a>' );				foreach((get_the_category()) as $category){				$get_info = new WP_Query("s=$category->cat_name&post_type=drama&orderby=parent&showposts=1");				if ($get_info->have_posts()) : while ($get_info->have_posts()) : $get_info->the_post();				echo get_post_meta($post->ID, "drama", true);				echo '<div class="latesteps-show">';				echo '<div class="latesteps-show-thumb">';				if (has_post_thumbnail()){the_post_thumbnail('latesteps_size');}				else{echo '<img height="85" width="119" src="',get_template_directory_uri(),'/lib/img/no_size.png" class="thumbnail no-img" alt="Thumbnail no image">';}				echo '</div><div class="latesteps-show-info">';				echo '<b><a href="'. esc_url(home_url( '/drama/' ) . esc_attr( $category->slug )) .'">',esc_attr( $category->name ),'</a></b>';				echo '<p><b>Synopsis : </b>',wp_trim_words(get_the_content(),10,'...' ),'</p>';				echo '<p><b>Genre : </b>',get_the_term_list($post->ID, 'genre', '',', '),'</p>';				echo '<p><b>Episode : </b>',get_the_term_list($post->ID, 'episode'),'<i>',get_the_term_list($post->ID, 'status'),'</i></p>';				endwhile; endif;				}				echo '</div></div>';				echo '</div>';								endwhile;			   echo '</div>';               			   echo $after_widget;                       }}register_widget( 'usagilabs_latesteps' ); /*   Plugin Name: Main Post   Description: create widget by usagilabs */class usagilabs_mainseries extends WP_Widget {        public function __construct() {               // widget actual processes			   /*				$widget_ops = array(					'description' => 'This widget for MAIN WIDGETS',				);               parent::WP_Widget(false,'.Usagilabs - Main Series', $widget_ops);				*/               parent::WP_Widget(false,'.Usagilabs - Main Series');        }        public function form( $instance ) {			echo '			<p><label for="'.$this->get_field_id('title').'">' . __('Title:') . '<br><input style="width:100%;" id="'.$this->get_field_id('title').'"  name="'.$this->get_field_name('title').'" type="text" value="'.esc_attr($instance['title']).'" /></label></p>			<p><label for="'.$this->get_field_id('posts').'">' . __('Number of Posts:',  'widgets') . '<br><input style="width:100%;"  id="'.$this->get_field_id('posts').'" name="'.$this->get_field_name('posts').'" type="text" value="'.esc_attr($instance['posts']).'" /></label></p>			<mark style="padding:5px 10px;display:inline-block;width:calc(100% - 20px);text-align:center;background:#f7f3cb;border-radius:3px;border:1px solid #dcd8ac">Display <b>drama list</b> tagged with <b>type</b>, under <b>tv</b> custom taxonomy <a href="https://image.ibb.co/mz06y5/usagilabs_widget.png">here example</a></mark>			<p>' . __('Custom Taxonomy:',  'widgets') . '<br>			<label for="'.$this->get_field_id('tax_query').'">			<input style="width:60%;"  id="'.$this->get_field_id('tax_query').'"  name="'.$this->get_field_name('tax_query').'" type="text" placeholder="name taxonomy (ex. type)" value="'.esc_attr($instance['tax_query']).'" /></label>			<label for="'.$this->get_field_id('tax_terms').'">			<input style="width:36%;"  id="'.$this->get_field_id('tax_terms').'"  name="'.$this->get_field_name('tax_terms').'" type="text" placeholder="terms (ex. tv)" value="'.esc_attr($instance['tax_terms']).'" /></label>				</p>			';        }        public function update( $new_instance, $old_instance ) {               // processes widget options to be saved               $instance = $old_instance;               $instance['title'] = strip_tags($new_instance['title']);               $instance['posts'] = strip_tags($new_instance['posts']);               $instance['tax_query'] = strip_tags($new_instance['tax_query']);               $instance['tax_terms'] = strip_tags($new_instance['tax_terms']);               return $instance;        }        public function widget( $args, $instance ) {               extract($args);               // outputs the content of the widget			   //$options = get_option('custom_recent');               $title = $instance['title'];               $num_post = $instance['posts'];               $tax_query = $instance['tax_query'];                $tax_terms = $instance['tax_terms']; 			   echo $before_widget;				if ( $title ) {				   echo $before_title . '<a href="'. esc_url(home_url( '/'. $tax_query .'/'. $tax_terms .' ' )) .'" style="color:inherit;">' . $title . '</a>' . $after_title;				} else {					echo $before_title . 'Latest drama Series' . $after_title;				}				echo '<div class="mainseries-wrap row-flex">';				$latestseries = new WP_Query( 				array( 				'post_type' => 'drama', 				'posts_per_page' => $num_post, 				'orderby' => 'parent',				'tax_query' => array(					array(						'taxonomy' => $tax_query,						'field'    => 'slug',						'terms'    => $tax_terms,					),				),				)//END				);				while ( $latestseries->have_posts() ) : $latestseries->the_post();				echo '<div class="mainseries-post col-md-3 col-sm-4 col-xs-4"><div>';					if (has_post_thumbnail()){the_post_thumbnail(array(153, 202));}					else{echo '<img height="202" width="153" src="',get_template_directory_uri(),'/lib/img/no_anim.png" class="thumbnail no-img" alt="Thumbnail no image">';}				echo the_title( sprintf( '<a href="%s" class="mainseries-title" rel="bookmark">', esc_url( get_permalink() ) ), '</a>' );				echo '<div class="mainseries-show">';				echo '<b>',the_title(sprintf( '<a href="%s" rel="bookmark">', esc_url( get_permalink() ) ), '</a>'),'</b>';				echo '<p><b>Synopsis : </b>',wp_trim_words(get_the_content(),10,'...' ),'</p>';				echo '<p><b>Genre : </b>',wp_trim_words(get_the_term_list($post->ID, 'genre', '', ', '),4,'')?:'Undefined','</p>';				echo '<p><b>Episode : </b>',get_the_term_list($post->ID, 'episode')?:'??','<i>',get_the_term_list($post->ID, 'status'),'</i></p>';				echo '</div>';				echo '<div class="clear"></div></div></div>';				endwhile;				echo '<div class="clear"></div></div>';			   echo $after_widget;                       }}register_widget( 'usagilabs_mainseries' );/*===========================		METABOX=============================*/ $video_stream1 = 'video_stream1'; $name_stream1 = 'name_stream1'; $video_stream2 = 'video_stream2'; $name_stream2 = 'name_stream2'; $video_stream3 = 'video_stream3'; $name_stream3 = 'name_stream3';  $dl_name_720p = 'dl_name_720p'; $dl_check_720p = 'dl_check_720p'; $dl_link1_720p = 'dl_link1_720p'; $dl_link2_720p = 'dl_link2_720p'; $dl_link3_720p = 'dl_link3_720p'; $dl_link4_720p = 'dl_link4_720p'; $dl_name_480p = 'dl_name_480p'; $dl_check_480p = 'dl_check_480p'; $dl_link1_480p = 'dl_link1_480p'; $dl_link2_480p = 'dl_link2_480p'; $dl_link3_480p = 'dl_link3_480p'; $dl_link4_480p = 'dl_link4_480p'; $dl_name_360p = 'dl_name_360p'; $dl_check_360p = 'dl_check_360p'; $dl_link1_360p = 'dl_link1_360p'; $dl_link2_360p = 'dl_link2_360p'; $dl_link3_360p = 'dl_link3_360p'; $dl_link4_360p = 'dl_link4_360p';/* ===	METABOX 1 === */$meta_box = array( 'id' => 'stream_meta_box', 'title' => 'Tab Streaming', 'page' => 'post', 'context' => 'normal', 'fields' => array(           array(             'title' => 'Tab Mirror 1',             'type' => 'title',           ),           array(             'name' => 'Name',             'desc' => '',             'id' =>$name_stream1,             'type' => 'text',             'std' => '',           ),           array(             'name' => 'Embed Code',             'desc' => '',             'id' =>$video_stream1,             'type' => 'text',             'std' => '',           ),           array(             'title' => 'Tab Mirror 2',             'type' => 'title',           ),           array(             'name' => 'Name',             'desc' => '',             'id' =>$name_stream2,             'type' => 'text',             'std' => '',           ),           array(             'name' => 'Embed Code',             'desc' => '',             'id' =>$video_stream2,             'type' => 'text',             'std' => '',           ),           array(             'title' => 'Tab Mirror 3',             'type' => 'title',           ),           array(             'name' => 'Name',             'desc' => '',             'id' =>$name_stream3,             'type' => 'text',             'std' => '',           ),           array(             'name' => 'Embed Code',             'desc' => '',             'id' =>$video_stream3,             'type' => 'text',             'std' => '',           )      ), ); /* ===	METABOX 2 === */$meta_donlot = array( 'id' => 'download_meta_box', 'title' => 'Download Area', 'page' => 'post', 'context' => 'normal', 'fields' => array(		   array('title' => 'Download Box Item 720P','type' => 'title',),           array('name' => 'Disable 720P','desc' => '','id' =>$dl_check_720p,'type' => 'checkbox','std' => '',),		   array('name' => 'Name','desc' => '','id' =>$dl_name_720p,'type' => 'text','std' => '',),           array('name' => 'Link 1','desc' => '','id' =>$dl_link1_720p,'type' => 'text','std' => '',),           array('name' => 'Link 2','desc' => '','id' =>$dl_link2_720p,'type' => 'text','std' => '',),           array('name' => 'Link 3','desc' => '','id' =>$dl_link3_720p,'type' => 'text','std' => '',),           array('name' => 'Link 4','desc' => '','id' =>$dl_link4_720p,'type' => 'text','std' => '',),		   array('title' => 'Download Box Item 480P','type' => 'title',),           array('name' => 'Disable 480P','desc' => '','id' =>$dl_check_480p,'type' => 'checkbox','std' => '',),		   array('name' => 'Name','desc' => '','id' =>$dl_name_480p,'type' => 'text','std' => '',),           array('name' => 'Link 1','desc' => '','id' =>$dl_link1_480p,'type' => 'text','std' => '',),           array('name' => 'Link 2','desc' => '','id' =>$dl_link2_480p,'type' => 'text','std' => '',),           array('name' => 'Link 3','desc' => '','id' =>$dl_link3_480p,'type' => 'text','std' => '',),           array('name' => 'Link 4','desc' => '','id' =>$dl_link4_480p,'type' => 'text','std' => '',),		   array('title' => 'Download Box Item 360P','type' => 'title',),           array('name' => 'Disable 360P','desc' => '','id' =>$dl_check_360p,'type' => 'checkbox','std' => '',),		   array('name' => 'Name','desc' => '','id' =>$dl_name_360p,'type' => 'text','std' => '',),           array('name' => 'Link 1','desc' => '','id' =>$dl_link1_360p,'type' => 'text','std' => '',),           array('name' => 'Link 2','desc' => '','id' =>$dl_link2_360p,'type' => 'text','std' => '',),           array('name' => 'Link 3','desc' => '','id' =>$dl_link3_360p,'type' => 'text','std' => '',),           array('name' => 'Link 4','desc' => '','id' =>$dl_link4_360p,'type' => 'text','std' => '',)      ), );add_action('admin_menu', 'metabox_add_box');function metabox_add_box() {global $meta_box,$meta_donlot;add_meta_box($meta_box['id'], $meta_box['title'], 'stream_show_box', $meta_box['page'], $meta_box['context'] );add_meta_box($meta_donlot['id'], $meta_donlot['title'], 'dlbox_show_box', $meta_donlot['page'], $meta_donlot['context'] );}function stream_show_box() {    global $meta_box, $meta_donlot, $post, $script;    //menggunakan nonce untuk verifikasi    echo '<input type="hidden" name="mytheme_meta_box_nonce" value="', wp_create_nonce(basename(__FILE__)), '" />';    echo '<table class="form-table">';    foreach ( $meta_box['fields'] as $field) {    //mendapatkan data untuk post meta    $meta = get_post_meta($post->ID, $field['id'], true);    switch ($field['type']) {	case 'title':			echo '<tr><td colspan="2" style="padding:10px!important;background:#EEE;text-transform:uppercase;font-size:14px;letter-spacing:.5px;user-select:none;-webkit-user-select:none;-moz-user-select:none">';		break;    case 'text':		echo '<tr>',            '<td width="20%" style="padding:4px 0px!important;"><label for"',$field['id'],'">', $field['name'], '</label></td>',         '<td style="padding:4px 0px!important;">';         break;	}    switch ($field['type']) {     case 'title':        echo '<b class="metabox-title">', $field['title'], '</b>';               break;    case 'text':        echo '<input type="text" name="', $field['id'], '" id="',$field['id'],'" value="',$meta,'"  placeholder="',$field['std'],'" size="30" style="width:100%" />', $field['desc'];               break;        }      echo '</td></tr>';         }  echo '</table>';}function dlbox_show_box() {    global $meta_donlot, $post, $script;    //menggunakan nonce untuk verifikasi    echo '<input type="hidden" name="mytheme_meta_box_nonce" value="', wp_create_nonce(basename(__FILE__)), '" />';    echo '<table class="form-table">';    foreach ( $meta_donlot['fields'] as $field) {    //mendapatkan data untuk post meta    $meta = get_post_meta($post->ID, $field['id'], true);    switch ($field['type']) {	case 'title':			echo '<tr><td colspan="2" style="padding:10px!important;background:#EEE;text-transform:uppercase;font-size:14px;letter-spacing:.5px;user-select:none;-webkit-user-select:none;-moz-user-select:none">';		break;    case 'text':case 'checkbox':		echo '<tr>',            '<td width="20%" style="padding:4px 0px!important;"><label for"',$field['id'],'">', $field['name'], '</label></td>',         '<td style="padding:4px 0px!important;">';         break;	}    switch ($field['type']) {     case 'title':        echo '<b class="metabox-title">', $field['title'], '</b>';               break;    case 'text':        echo '<input type="text" name="', $field['id'], '" id="',$field['id'],'" value="',$meta,'"  placeholder="',$field['std'],'" size="30" style="width:100%" />', $field['desc'];               break;    case 'checkbox':        echo '<input type="checkbox" name="', $field['id'], '" id="', $field['id'], '"', $meta ? 'checked="checked"' : '', ' />' , $field['desc'];        break;         }      echo '</td></tr>';         }  echo '</table>';} /* ===	SAVE METABOX === */add_action('save_post', 'mytheme_save_data');function mytheme_save_data($post_id) {    global $meta_box,$meta_donlot;        //verify nonce    if ( !isset($_POST['mytheme_meta_box_nonce']) || !wp_verify_nonce($_POST['mytheme_meta_box_nonce'], basename(__FILE__))) {        return $post_id;    }        //check autosave    if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) {        return $post_id;    }        //check permissions    if ('page'  == $_POST['post_type']) {        if (!current_user_can('edit_page', $post_id)) {            return $post_id;        }    } elseif (!current_user_can('edit_post', $post_id)) {        return $post_id;    }        foreach ($meta_box['fields'] as $field) {        $old = get_post_meta($post_id, $field['id'], true);        $new = $_POST[$field['id']];                if ($new && $new != $old) {            update_post_meta($post_id, $field['id'], $new);        } elseif ('' == $new && $old) {            delete_post_meta($post_id, $field['id'], $old);        }    }        foreach ($meta_donlot['fields'] as $field) {        $old = get_post_meta($post_id, $field['id'], true);        $new = $_POST[$field['id']];                if ($new && $new != $old) {            update_post_meta($post_id, $field['id'], $new);        } elseif ('' == $new && $old) {            delete_post_meta($post_id, $field['id'], $old);        }    }}?>